// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class veSPAUserCheckpointEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("depositedValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("autoCooldown", Value.fromBoolean(false));
    this.set("expiryUnix", Value.fromBigInt(BigInt.zero()));
    this.set("expiry", Value.fromString(""));
    this.set("actionType", Value.fromString(""));
    this.set("veSPABalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPAUserCheckpointEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPAUserCheckpointEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPAUserCheckpointEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPAUserCheckpointEvent | null {
    return changetype<veSPAUserCheckpointEvent | null>(
      store.get("veSPAUserCheckpointEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get depositedValue(): BigDecimal {
    let value = this.get("depositedValue");
    return value!.toBigDecimal();
  }

  set depositedValue(value: BigDecimal) {
    this.set("depositedValue", Value.fromBigDecimal(value));
  }

  get autoCooldown(): boolean {
    let value = this.get("autoCooldown");
    return value!.toBoolean();
  }

  set autoCooldown(value: boolean) {
    this.set("autoCooldown", Value.fromBoolean(value));
  }

  get expiryUnix(): BigInt {
    let value = this.get("expiryUnix");
    return value!.toBigInt();
  }

  set expiryUnix(value: BigInt) {
    this.set("expiryUnix", Value.fromBigInt(value));
  }

  get expiry(): string {
    let value = this.get("expiry");
    return value!.toString();
  }

  set expiry(value: string) {
    this.set("expiry", Value.fromString(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }

  get veSPABalance(): BigDecimal {
    let value = this.get("veSPABalance");
    return value!.toBigDecimal();
  }

  set veSPABalance(value: BigDecimal) {
    this.set("veSPABalance", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPACreateLockEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("depositedValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("autoCooldown", Value.fromBoolean(false));
    this.set("expiryUnix", Value.fromBigInt(BigInt.zero()));
    this.set("expiry", Value.fromString(""));
    this.set("actionType", Value.fromString(""));
    this.set("veSPABalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save veSPACreateLockEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPACreateLockEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPACreateLockEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPACreateLockEvent | null {
    return changetype<veSPACreateLockEvent | null>(
      store.get("veSPACreateLockEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get depositedValue(): BigDecimal {
    let value = this.get("depositedValue");
    return value!.toBigDecimal();
  }

  set depositedValue(value: BigDecimal) {
    this.set("depositedValue", Value.fromBigDecimal(value));
  }

  get autoCooldown(): boolean {
    let value = this.get("autoCooldown");
    return value!.toBoolean();
  }

  set autoCooldown(value: boolean) {
    this.set("autoCooldown", Value.fromBoolean(value));
  }

  get expiryUnix(): BigInt {
    let value = this.get("expiryUnix");
    return value!.toBigInt();
  }

  set expiryUnix(value: BigInt) {
    this.set("expiryUnix", Value.fromBigInt(value));
  }

  get expiry(): string {
    let value = this.get("expiry");
    return value!.toString();
  }

  set expiry(value: string) {
    this.set("expiry", Value.fromString(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }

  get veSPABalance(): BigDecimal {
    let value = this.get("veSPABalance");
    return value!.toBigDecimal();
  }

  set veSPABalance(value: BigDecimal) {
    this.set("veSPABalance", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPAIncreaseAmountEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("depositedValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("autoCooldown", Value.fromBoolean(false));
    this.set("actionType", Value.fromString(""));
    this.set("veSPABalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPAIncreaseAmountEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPAIncreaseAmountEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPAIncreaseAmountEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPAIncreaseAmountEvent | null {
    return changetype<veSPAIncreaseAmountEvent | null>(
      store.get("veSPAIncreaseAmountEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get depositedValue(): BigDecimal {
    let value = this.get("depositedValue");
    return value!.toBigDecimal();
  }

  set depositedValue(value: BigDecimal) {
    this.set("depositedValue", Value.fromBigDecimal(value));
  }

  get autoCooldown(): boolean {
    let value = this.get("autoCooldown");
    return value!.toBoolean();
  }

  set autoCooldown(value: boolean) {
    this.set("autoCooldown", Value.fromBoolean(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }

  get veSPABalance(): BigDecimal {
    let value = this.get("veSPABalance");
    return value!.toBigDecimal();
  }

  set veSPABalance(value: BigDecimal) {
    this.set("veSPABalance", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPAIncreaseLockTimeEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("autoCooldown", Value.fromBoolean(false));
    this.set("expiryUnix", Value.fromBigInt(BigInt.zero()));
    this.set("expiry", Value.fromString(""));
    this.set("actionType", Value.fromString(""));
    this.set("veSPABalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPAIncreaseLockTimeEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPAIncreaseLockTimeEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPAIncreaseLockTimeEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPAIncreaseLockTimeEvent | null {
    return changetype<veSPAIncreaseLockTimeEvent | null>(
      store.get("veSPAIncreaseLockTimeEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get autoCooldown(): boolean {
    let value = this.get("autoCooldown");
    return value!.toBoolean();
  }

  set autoCooldown(value: boolean) {
    this.set("autoCooldown", Value.fromBoolean(value));
  }

  get expiryUnix(): BigInt {
    let value = this.get("expiryUnix");
    return value!.toBigInt();
  }

  set expiryUnix(value: BigInt) {
    this.set("expiryUnix", Value.fromBigInt(value));
  }

  get expiry(): string {
    let value = this.get("expiry");
    return value!.toString();
  }

  set expiry(value: string) {
    this.set("expiry", Value.fromString(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }

  get veSPABalance(): BigDecimal {
    let value = this.get("veSPABalance");
    return value!.toBigDecimal();
  }

  set veSPABalance(value: BigDecimal) {
    this.set("veSPABalance", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPAInitiateCooldownEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("depositedValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("autoCooldown", Value.fromBoolean(false));
    this.set("expiryUnix", Value.fromBigInt(BigInt.zero()));
    this.set("expiry", Value.fromString(""));
    this.set("actionType", Value.fromString(""));
    this.set("veSPABalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPAInitiateCooldownEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPAInitiateCooldownEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPAInitiateCooldownEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPAInitiateCooldownEvent | null {
    return changetype<veSPAInitiateCooldownEvent | null>(
      store.get("veSPAInitiateCooldownEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get depositedValue(): BigDecimal {
    let value = this.get("depositedValue");
    return value!.toBigDecimal();
  }

  set depositedValue(value: BigDecimal) {
    this.set("depositedValue", Value.fromBigDecimal(value));
  }

  get autoCooldown(): boolean {
    let value = this.get("autoCooldown");
    return value!.toBoolean();
  }

  set autoCooldown(value: boolean) {
    this.set("autoCooldown", Value.fromBoolean(value));
  }

  get expiryUnix(): BigInt {
    let value = this.get("expiryUnix");
    return value!.toBigInt();
  }

  set expiryUnix(value: BigInt) {
    this.set("expiryUnix", Value.fromBigInt(value));
  }

  get expiry(): string {
    let value = this.get("expiry");
    return value!.toString();
  }

  set expiry(value: string) {
    this.set("expiry", Value.fromString(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }

  get veSPABalance(): BigDecimal {
    let value = this.get("veSPABalance");
    return value!.toBigDecimal();
  }

  set veSPABalance(value: BigDecimal) {
    this.set("veSPABalance", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPADepositForEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("depositedValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("autoCooldown", Value.fromBoolean(false));
    this.set("actionType", Value.fromString(""));
    this.set("veSPABalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save veSPADepositForEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPADepositForEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPADepositForEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPADepositForEvent | null {
    return changetype<veSPADepositForEvent | null>(
      store.get("veSPADepositForEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get depositedValue(): BigDecimal {
    let value = this.get("depositedValue");
    return value!.toBigDecimal();
  }

  set depositedValue(value: BigDecimal) {
    this.set("depositedValue", Value.fromBigDecimal(value));
  }

  get autoCooldown(): boolean {
    let value = this.get("autoCooldown");
    return value!.toBoolean();
  }

  set autoCooldown(value: boolean) {
    this.set("autoCooldown", Value.fromBoolean(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }

  get veSPABalance(): BigDecimal {
    let value = this.get("veSPABalance");
    return value!.toBigDecimal();
  }

  set veSPABalance(value: BigDecimal) {
    this.set("veSPABalance", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class stakedSPASupplyEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previousSPASupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("actualSPASupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save stakedSPASupplyEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save stakedSPASupplyEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("stakedSPASupplyEvent", id.toString(), this);
    }
  }

  static load(id: string): stakedSPASupplyEvent | null {
    return changetype<stakedSPASupplyEvent | null>(
      store.get("stakedSPASupplyEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousSPASupply(): BigDecimal {
    let value = this.get("previousSPASupply");
    return value!.toBigDecimal();
  }

  set previousSPASupply(value: BigDecimal) {
    this.set("previousSPASupply", Value.fromBigDecimal(value));
  }

  get actualSPASupply(): BigDecimal {
    let value = this.get("actualSPASupply");
    return value!.toBigDecimal();
  }

  set actualSPASupply(value: BigDecimal) {
    this.set("actualSPASupply", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class stakedSPASupplyDayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previousSPASupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("actualSPASupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save stakedSPASupplyDayEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save stakedSPASupplyDayEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("stakedSPASupplyDayEvent", id.toString(), this);
    }
  }

  static load(id: string): stakedSPASupplyDayEvent | null {
    return changetype<stakedSPASupplyDayEvent | null>(
      store.get("stakedSPASupplyDayEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousSPASupply(): BigDecimal {
    let value = this.get("previousSPASupply");
    return value!.toBigDecimal();
  }

  set previousSPASupply(value: BigDecimal) {
    this.set("previousSPASupply", Value.fromBigDecimal(value));
  }

  get actualSPASupply(): BigDecimal {
    let value = this.get("actualSPASupply");
    return value!.toBigDecimal();
  }

  set actualSPASupply(value: BigDecimal) {
    this.set("actualSPASupply", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPASupplyEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("VeSPASupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save veSPASupplyEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPASupplyEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPASupplyEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPASupplyEvent | null {
    return changetype<veSPASupplyEvent | null>(
      store.get("veSPASupplyEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get VeSPASupply(): BigDecimal {
    let value = this.get("VeSPASupply");
    return value!.toBigDecimal();
  }

  set VeSPASupply(value: BigDecimal) {
    this.set("VeSPASupply", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPASupplyDayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("VeSPASupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save veSPASupplyDayEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPASupplyDayEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPASupplyDayEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPASupplyDayEvent | null {
    return changetype<veSPASupplyDayEvent | null>(
      store.get("veSPASupplyDayEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get VeSPASupply(): BigDecimal {
    let value = this.get("VeSPASupply");
    return value!.toBigDecimal();
  }

  set VeSPASupply(value: BigDecimal) {
    this.set("VeSPASupply", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPAGlobalCheckpointEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("caller", Value.fromBytes(Bytes.empty()));
    this.set("epoch", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPAGlobalCheckpointEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPAGlobalCheckpointEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPAGlobalCheckpointEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPAGlobalCheckpointEvent | null {
    return changetype<veSPAGlobalCheckpointEvent | null>(
      store.get("veSPAGlobalCheckpointEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get epoch(): BigDecimal {
    let value = this.get("epoch");
    return value!.toBigDecimal();
  }

  set epoch(value: BigDecimal) {
    this.set("epoch", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPAWithdrawEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("provider", Value.fromBytes(Bytes.empty()));
    this.set("withdrawTime", Value.fromBigInt(BigInt.zero()));
    this.set("withdrawnValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save veSPAWithdrawEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPAWithdrawEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPAWithdrawEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPAWithdrawEvent | null {
    return changetype<veSPAWithdrawEvent | null>(
      store.get("veSPAWithdrawEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get withdrawTime(): BigInt {
    let value = this.get("withdrawTime");
    return value!.toBigInt();
  }

  set withdrawTime(value: BigInt) {
    this.set("withdrawTime", Value.fromBigInt(value));
  }

  get withdrawnValue(): BigDecimal {
    let value = this.get("withdrawnValue");
    return value!.toBigDecimal();
  }

  set withdrawnValue(value: BigDecimal) {
    this.set("withdrawnValue", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPARewardClaimedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("recipient", Value.fromBytes(Bytes.empty()));
    this.set("lastRewardClaimTimeUnix", Value.fromBigInt(BigInt.zero()));
    this.set("rewardClaimTillUnix", Value.fromBigInt(BigInt.zero()));
    this.set("lastRewardClaimTime", Value.fromString(""));
    this.set("rewardClaimTill", Value.fromString(""));
    this.set("rewardAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("staked", Value.fromBoolean(false));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPARewardClaimedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPARewardClaimedEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPARewardClaimedEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPARewardClaimedEvent | null {
    return changetype<veSPARewardClaimedEvent | null>(
      store.get("veSPARewardClaimedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get lastRewardClaimTimeUnix(): BigInt {
    let value = this.get("lastRewardClaimTimeUnix");
    return value!.toBigInt();
  }

  set lastRewardClaimTimeUnix(value: BigInt) {
    this.set("lastRewardClaimTimeUnix", Value.fromBigInt(value));
  }

  get rewardClaimTillUnix(): BigInt {
    let value = this.get("rewardClaimTillUnix");
    return value!.toBigInt();
  }

  set rewardClaimTillUnix(value: BigInt) {
    this.set("rewardClaimTillUnix", Value.fromBigInt(value));
  }

  get lastRewardClaimTime(): string {
    let value = this.get("lastRewardClaimTime");
    return value!.toString();
  }

  set lastRewardClaimTime(value: string) {
    this.set("lastRewardClaimTime", Value.fromString(value));
  }

  get rewardClaimTill(): string {
    let value = this.get("rewardClaimTill");
    return value!.toString();
  }

  set rewardClaimTill(value: string) {
    this.set("rewardClaimTill", Value.fromString(value));
  }

  get rewardAmount(): BigDecimal {
    let value = this.get("rewardAmount");
    return value!.toBigDecimal();
  }

  set rewardAmount(value: BigDecimal) {
    this.set("rewardAmount", Value.fromBigDecimal(value));
  }

  get staked(): boolean {
    let value = this.get("staked");
    return value!.toBoolean();
  }

  set staked(value: boolean) {
    this.set("staked", Value.fromBoolean(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPARewardCheckpointAllowedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("allowed", Value.fromBoolean(false));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPARewardCheckpointAllowedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPARewardCheckpointAllowedEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPARewardCheckpointAllowedEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPARewardCheckpointAllowedEvent | null {
    return changetype<veSPARewardCheckpointAllowedEvent | null>(
      store.get("veSPARewardCheckpointAllowedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get allowed(): boolean {
    let value = this.get("allowed");
    return value!.toBoolean();
  }

  set allowed(value: boolean) {
    this.set("allowed", Value.fromBoolean(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPARewardCheckpointEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPARewardCheckpointEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPARewardCheckpointEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPARewardCheckpointEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPARewardCheckpointEvent | null {
    return changetype<veSPARewardCheckpointEvent | null>(
      store.get("veSPARewardCheckpointEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPARewardMaxItterationUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("oldItteration", Value.fromBigInt(BigInt.zero()));
    this.set("newItteration", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPARewardMaxItterationUpdate entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPARewardMaxItterationUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPARewardMaxItterationUpdate", id.toString(), this);
    }
  }

  static load(id: string): veSPARewardMaxItterationUpdate | null {
    return changetype<veSPARewardMaxItterationUpdate | null>(
      store.get("veSPARewardMaxItterationUpdate", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldItteration(): BigInt {
    let value = this.get("oldItteration");
    return value!.toBigInt();
  }

  set oldItteration(value: BigInt) {
    this.set("oldItteration", Value.fromBigInt(value));
  }

  get newItteration(): BigInt {
    let value = this.get("newItteration");
    return value!.toBigInt();
  }

  set newItteration(value: BigInt) {
    this.set("newItteration", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPARecoverERC20Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPARecoverERC20Event entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPARecoverERC20Event entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPARecoverERC20Event", id.toString(), this);
    }
  }

  static load(id: string): veSPARecoverERC20Event | null {
    return changetype<veSPARecoverERC20Event | null>(
      store.get("veSPARecoverERC20Event", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class veSPARewardKilledEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromString(""));
    this.set("timeStampUnix", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save veSPARewardKilledEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save veSPARewardKilledEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("veSPARewardKilledEvent", id.toString(), this);
    }
  }

  static load(id: string): veSPARewardKilledEvent | null {
    return changetype<veSPARewardKilledEvent | null>(
      store.get("veSPARewardKilledEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get timeStampUnix(): BigInt {
    let value = this.get("timeStampUnix");
    return value!.toBigInt();
  }

  set timeStampUnix(value: BigInt) {
    this.set("timeStampUnix", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
