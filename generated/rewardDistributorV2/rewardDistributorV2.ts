// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CheckpointAllowed extends ethereum.Event {
  get params(): CheckpointAllowed__Params {
    return new CheckpointAllowed__Params(this);
  }
}

export class CheckpointAllowed__Params {
  _event: CheckpointAllowed;

  constructor(event: CheckpointAllowed) {
    this._event = event;
  }

  get _allowed(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get _recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _staked(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _lastRewardClaimTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _rewardClaimedTill(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Killed extends ethereum.Event {
  get params(): Killed__Params {
    return new Killed__Params(this);
  }
}

export class Killed__Params {
  _event: Killed;

  constructor(event: Killed) {
    this._event = event;
  }
}

export class MaxIterationsUpdated extends ethereum.Event {
  get params(): MaxIterationsUpdated__Params {
    return new MaxIterationsUpdated__Params(this);
  }
}

export class MaxIterationsUpdated__Params {
  _event: MaxIterationsUpdated;

  constructor(event: MaxIterationsUpdated) {
    this._event = event;
  }

  get _oldNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newNo(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RecoveredERC20 extends ethereum.Event {
  get params(): RecoveredERC20__Params {
    return new RecoveredERC20__Params(this);
  }
}

export class RecoveredERC20__Params {
  _event: RecoveredERC20;

  constructor(event: RecoveredERC20) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardsCheckpointed extends ethereum.Event {
  get params(): RewardsCheckpointed__Params {
    return new RewardsCheckpointed__Params(this);
  }
}

export class RewardsCheckpointed__Params {
  _event: RewardsCheckpointed;

  constructor(event: RewardsCheckpointed) {
    this._event = event;
  }

  get _amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class rewardDistributorV2__computeRewardsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class rewardDistributorV2 extends ethereum.SmartContract {
  static bind(address: Address): rewardDistributorV2 {
    return new rewardDistributorV2("rewardDistributorV2", address);
  }

  EMERGENCY_RETURN(): Address {
    let result = super.call(
      "EMERGENCY_RETURN",
      "EMERGENCY_RETURN():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_EMERGENCY_RETURN(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "EMERGENCY_RETURN",
      "EMERGENCY_RETURN():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  REWARD_CHECKPOINT_DEADLINE(): BigInt {
    let result = super.call(
      "REWARD_CHECKPOINT_DEADLINE",
      "REWARD_CHECKPOINT_DEADLINE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REWARD_CHECKPOINT_DEADLINE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARD_CHECKPOINT_DEADLINE",
      "REWARD_CHECKPOINT_DEADLINE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SPA(): Address {
    let result = super.call("SPA", "SPA():(address)", []);

    return result[0].toAddress();
  }

  try_SPA(): ethereum.CallResult<Address> {
    let result = super.tryCall("SPA", "SPA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WEEK(): BigInt {
    let result = super.call("WEEK", "WEEK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_WEEK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("WEEK", "WEEK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canCheckpointReward(): boolean {
    let result = super.call(
      "canCheckpointReward",
      "canCheckpointReward():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_canCheckpointReward(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canCheckpointReward",
      "canCheckpointReward():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claim(restake: boolean): BigInt {
    let result = super.call("claim", "claim(bool):(uint256)", [
      ethereum.Value.fromBoolean(restake)
    ]);

    return result[0].toBigInt();
  }

  try_claim(restake: boolean): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim(bool):(uint256)", [
      ethereum.Value.fromBoolean(restake)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeRewards(addr: Address): rewardDistributorV2__computeRewardsResult {
    let result = super.call(
      "computeRewards",
      "computeRewards(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return new rewardDistributorV2__computeRewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_computeRewards(
    addr: Address
  ): ethereum.CallResult<rewardDistributorV2__computeRewardsResult> {
    let result = super.tryCall(
      "computeRewards",
      "computeRewards(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new rewardDistributorV2__computeRewardsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  isKilled(): boolean {
    let result = super.call("isKilled", "isKilled():(bool)", []);

    return result[0].toBoolean();
  }

  try_isKilled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKilled", "isKilled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRewardBalance(): BigInt {
    let result = super.call(
      "lastRewardBalance",
      "lastRewardBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardBalance",
      "lastRewardBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRewardCheckpointTime(): BigInt {
    let result = super.call(
      "lastRewardCheckpointTime",
      "lastRewardCheckpointTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardCheckpointTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardCheckpointTime",
      "lastRewardCheckpointTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxIterations(): BigInt {
    let result = super.call("maxIterations", "maxIterations():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxIterations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxIterations",
      "maxIterations():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsPerWeek(param0: BigInt): BigInt {
    let result = super.call(
      "rewardsPerWeek",
      "rewardsPerWeek(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardsPerWeek(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsPerWeek",
      "rewardsPerWeek(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startTime(): BigInt {
    let result = super.call("startTime", "startTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startTime", "startTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeCursorOf(param0: Address): BigInt {
    let result = super.call("timeCursorOf", "timeCursorOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_timeCursorOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeCursorOf",
      "timeCursorOf(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  veSPA(): Address {
    let result = super.call("veSPA", "veSPA():(address)", []);

    return result[0].toAddress();
  }

  try_veSPA(): ethereum.CallResult<Address> {
    let result = super.tryCall("veSPA", "veSPA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  veSPASupply(param0: BigInt): BigInt {
    let result = super.call("veSPASupply", "veSPASupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_veSPASupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "veSPASupply",
      "veSPASupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _veSPA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _spa(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _emergencyRet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRewardsCall extends ethereum.Call {
  get inputs(): AddRewardsCall__Inputs {
    return new AddRewardsCall__Inputs(this);
  }

  get outputs(): AddRewardsCall__Outputs {
    return new AddRewardsCall__Outputs(this);
  }
}

export class AddRewardsCall__Inputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddRewardsCall__Outputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }
}

export class CheckpointRewardCall extends ethereum.Call {
  get inputs(): CheckpointRewardCall__Inputs {
    return new CheckpointRewardCall__Inputs(this);
  }

  get outputs(): CheckpointRewardCall__Outputs {
    return new CheckpointRewardCall__Outputs(this);
  }
}

export class CheckpointRewardCall__Inputs {
  _call: CheckpointRewardCall;

  constructor(call: CheckpointRewardCall) {
    this._call = call;
  }
}

export class CheckpointRewardCall__Outputs {
  _call: CheckpointRewardCall;

  constructor(call: CheckpointRewardCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get restake(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class KillMeCall extends ethereum.Call {
  get inputs(): KillMeCall__Inputs {
    return new KillMeCall__Inputs(this);
  }

  get outputs(): KillMeCall__Outputs {
    return new KillMeCall__Outputs(this);
  }
}

export class KillMeCall__Inputs {
  _call: KillMeCall;

  constructor(call: KillMeCall) {
    this._call = call;
  }
}

export class KillMeCall__Outputs {
  _call: KillMeCall;

  constructor(call: KillMeCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get _coin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ToggleAllowCheckpointRewardCall extends ethereum.Call {
  get inputs(): ToggleAllowCheckpointRewardCall__Inputs {
    return new ToggleAllowCheckpointRewardCall__Inputs(this);
  }

  get outputs(): ToggleAllowCheckpointRewardCall__Outputs {
    return new ToggleAllowCheckpointRewardCall__Outputs(this);
  }
}

export class ToggleAllowCheckpointRewardCall__Inputs {
  _call: ToggleAllowCheckpointRewardCall;

  constructor(call: ToggleAllowCheckpointRewardCall) {
    this._call = call;
  }
}

export class ToggleAllowCheckpointRewardCall__Outputs {
  _call: ToggleAllowCheckpointRewardCall;

  constructor(call: ToggleAllowCheckpointRewardCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMaxIterationsCall extends ethereum.Call {
  get inputs(): UpdateMaxIterationsCall__Inputs {
    return new UpdateMaxIterationsCall__Inputs(this);
  }

  get outputs(): UpdateMaxIterationsCall__Outputs {
    return new UpdateMaxIterationsCall__Outputs(this);
  }
}

export class UpdateMaxIterationsCall__Inputs {
  _call: UpdateMaxIterationsCall;

  constructor(call: UpdateMaxIterationsCall) {
    this._call = call;
  }

  get newIterationNum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxIterationsCall__Outputs {
  _call: UpdateMaxIterationsCall;

  constructor(call: UpdateMaxIterationsCall) {
    this._call = call;
  }
}
