type veSPAUserCheckpointEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!
  veSPABalance: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPACreateLockEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!
  veSPABalance: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAIncreaseAmountEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  actionType: String!
  veSPABalance: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAIncreaseLockTimeEvent @entity {
  id: ID!
  provider: Bytes!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!
  veSPABalance: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAInitiateCooldownEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!
  veSPABalance: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPADepositForEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  actionType: String!
  veSPABalance: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type stakedSPASupplyEvent @entity {
  id: ID!
  previousSPASupply: BigDecimal!
  actualSPASupply: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type stakedSPASupplyDayEvent @entity {
  id: ID!
  previousSPASupply: BigDecimal!
  actualSPASupply: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPASupplyEvent @entity {
  id: ID!
  VeSPASupply: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPASupplyDayEvent @entity {
  id: ID!

  VeSPASupply: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPAGlobalCheckpointEvent @entity {
  id: ID!
  caller: Bytes!
  epoch: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAWithdrawEvent @entity {
  id: ID!
  provider: Bytes!
  withdrawTime: BigInt!
  withdrawnValue: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardClaimedEvent @entity {
  id: ID!
  recipient: Bytes!
  lastRewardClaimTimeUnix: BigInt!
  rewardClaimTillUnix: BigInt!
  lastRewardClaimTime: String!
  rewardClaimTill: String!
  rewardAmount: BigDecimal!
  staked: Boolean!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardCheckpointAllowedEvent @entity {
  id: ID!
  allowed: Boolean!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardCheckpointEvent @entity {
  id: ID!
  amount: BigDecimal!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardMaxItterationUpdate @entity {
  id: ID!
  oldItteration: BigInt!
  newItteration: BigInt!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARecoverERC20Event @entity {
  id: ID!
  tokenAddress: Bytes!
  amount: BigInt!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardKilledEvent @entity {
  id: ID!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
