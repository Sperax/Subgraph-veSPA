type RedemptionRequest @entity(immutable: true) {
  id: Bytes!
  by: Bytes! # address
  requestId: BigInt! # uint256
  xSpaAmount: BigDecimal! # uint256
  unlockTime: String! # string
  unlockTimeUnix: BigInt! # uint256
  duration: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type SPARedeem @entity(immutable: true) {
  id: Bytes!
  redeemer: Bytes! # address
  recipient: Bytes! # address
  requestId: BigInt! # uint256
  spaAmount: BigDecimal! # uint256
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type VeSPAStake @entity(immutable: true) {
  id: Bytes!
  for: Bytes! # address
  spaAmount: BigDecimal! # uint128
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigDecimal! # uint256
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Initialize @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransfer @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}


