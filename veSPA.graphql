type veSPAActiveHolder @entity {
  id: ID!
  actionsCount:BigInt!
  activeHolder: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: [String!]!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPANumberHolder @entity {
  id: ID!
  active:BigInt!
  all:BigInt!
}
type veSPAHolder @entity {
  id: ID!
  holders:[Bytes!]
  actionsCount:BigInt!
  Holder: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: [String!]!
  rewardDistributed:BigDecimal!
  totalRewardDistributed:BigDecimal!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type holderReward @entity {
  id: ID!
  count:BigInt!
  holder:Bytes!

  weeklyRewards:BigDecimal
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAUserCheckpointEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!

  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}



type veSPACreateLockEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!

  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAIncreaseAmountEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  actionType: String!

  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type totalSpaDayStaked @entity {
  id: ID!
  totalStaked:BigDecimal!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type totalSpaStaked @entity {
  id: ID!
  totalStaked:BigDecimal!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAIncreaseLockTimeEvent @entity {
  id: ID!
  provider: Bytes!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAInitiateCooldownEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  expiryUnix: BigInt!
  expiry: String!
  actionType: String!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPADepositForEvent @entity {
  id: ID!
  provider: Bytes!
  depositedValue: BigDecimal!
  autoCooldown: Boolean!
  actionType: String!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type stakedSPASupplyEvent @entity {
  id: ID!
  previousSPASupply: BigDecimal!
  actualSPASupply: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type stakedSPASupplyDayEvent @entity {
  id: ID!
  previousSPASupply: BigDecimal!
  actualSPASupply: BigDecimal!
  count:BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPASupplyEvent @entity {
  id: ID!
  VeSPASupply: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPASupplyDayEvent @entity {
  id: ID!

  VeSPASupply: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPAGlobalCheckpointEvent @entity {
  id: ID!
  caller: Bytes!
  epoch: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type veSPAWithdrawEvent @entity {
  id: ID!
  provider: Bytes!
  withdrawTime: BigInt!
  withdrawnValue: BigDecimal!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardClaimedEvent @entity {
  id: ID!
  recipient: Bytes!
  rewardClaimTillUnix: BigInt!
  rewardClaimTill: String!
  rewardAmount: [BigDecimal!]!
  staked: Boolean!
  version: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardCheckpointAllowedEvent @entity {
  id: ID!
  allowed: Boolean!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardCheckpointEvent @entity {
  id: ID!
  amount: BigDecimal!
  token: Bytes!
  version: BigInt!
  numEpochs: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardMaxItterationUpdate @entity {
  id: ID!
  oldItteration: BigInt!
  newItteration: BigInt!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARecoverERC20Event @entity {
  id: ID!
  tokenAddress: Bytes!
  amount: BigInt!
  version: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
type veSPARewardKilledEvent @entity {
  id: ID!
  version: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}
#-----------xSPA------------------------
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}


type RedemptionRequested @entity(immutable: true) {
  id: Bytes!
  _by: Bytes! # address
  _requestId: BigInt! # uint256
  _xSpaAmount: BigDecimal! # uint256
  _unlockTime: String! # string
  _unlockTimeUnix: BigInt # uint256
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type SPARedeemed @entity(immutable: true) {
  id: Bytes!
  _redeemer: Bytes! # address
  _recipient: Bytes! # address
  _requestId: BigInt! # uint256
  _spaAmount: BigDecimal! # uint256
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type StakedInVeSPA @entity(immutable: true) {
  id: Bytes!
  _for: Bytes! # address
  _spaAmount: BigDecimal! # uint128
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigDecimal! # uint256
  timeStamp: String!
  timeStampUnix: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}



type RecoverRewardToken @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  recipient: Bytes! # address
  totalAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegisterRewardToken @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
